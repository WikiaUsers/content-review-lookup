// <nowiki>
// switch infobox code for newer infoboxes
// as generated by [[Module:Infobox]]
;(function ($) {
	// lookup the value for the param and index provided in resources
	// if not present, use the param at index 0
	var getVal = function (param, index) {
		var $span = $('.infobox-switch-resources > span[data-attr-param="' + param + '"]'),
			$val,
			addclass;
 
		// make sure the resources contain a span for the param
		if (!$span.length) {
			return { value: -1, addclass: -1 };
		}
 
		$val = $span.find('> span[data-attr-index="' + index + '"]');
 
		// if it couldn't grab the new one, grab the default
		if (!$val.length) {
			$val = $span.find('> span[data-attr-index="0"]');
		}
 
		addclass = $val.attr('data-addclass');
		if (typeof addclass === 'undefined') {
			addclass = '';
		}
 
		return { value: $val.html(), addclass: addclass };
	},
 
	// shows the infobox corresponding to the given index
	showInfoboxVariant = function (index) {
		// for everything that can be changed...
		// the things that can change can be a th, td, or caption tag
		// it has a data-attr-param that isn't empty
		var selectors = [
			'.infobox-switch th[data-attr-param][data-attr-param!=""]',
			'.infobox-switch td[data-attr-param][data-attr-param!=""]',
			'.infobox-switch caption[data-attr-param][data-attr-param!=""]'
		];
 
		$(selectors.join(',')).each(function () {
			var elt = $(this),
				param = elt.attr('data-attr-param'),
				// attempt to grab the new version from the infobox resources
				v = getVal(param, index),
				val = v.value,
				// 'references' support:
				// if a the value from the resources is $2 (specifically \$\d+ in regex),
				// use that value instead of $2
				$m = /^\$(\d+)/.exec(val),
				newclass = v.addclass,
				$parent;
 
			if ($m) {
				v = getVal(param, $m[1]);
				val = v.value;
				newclass = v.addclass;
			}
 
			// if getVal() returns -1, the resources didn't contain the param, so skip it
			// === prevents false matches with a string "-1" returned by val.html() in getVal()
			if (val === -1) {
				return;
			}
 
			// put that into the cell
			//if there's an input followed by a span, its a calc from [[MediaWiki:Common.js/infoboxQty.js]], so we need to account for that
			if (elt.find('input+span').length) {
				// input+span returns the span
				elt.find('input+span').replaceWith($(val));
				//reset the input to 1
				elt.find('input').val(1);
			} else {
				//otherwise its a normal cell
				elt.html(val);
			}
 
			// change classes if required
			// put the class found in resources with the original from the tr, and trim to remove excess spaces
			newclass = (originalClasses[param] + ' ' + newclass).trim();
			if (newclass === '') {
				//if its empty, we can remove the class attr
				$parent = elt.parent('tr');
				if ($parent.length) {
					// parent is a tr
					$parent.removeAttr('class');
				}
				else {
					// parent is not a tr
					elt.removeAttr('class');
				}
 
			} else {
				//if it is not empty, replace the class attr with the new class attr
				$parent = elt.parent('tr');
				if ($parent.length) {
					$parent.attr('class', newclass);
				}
				else {
					elt.attr('class', newclass);
				}
			}
		});
	},
 
	// changes the window's hash without scrolling to the position of an unrelated element
	changeHash = function (hash) {
		if (window.history && window.history.replaceState) {
			if (window.location.hash !== '') {
				window.history.replaceState({}, '', window.location.href.replace(window.location.hash, hash));
			} else {
				window.history.replaceState({}, '', window.location.href + hash);
			}
		} else {
			// replaceState not supported, I guess we just change the hash normally?
			window.location.hash = hash;
		}
	},
 
	// various other vars
	$infoboxselect = $('.infobox-buttons-select'),
	$select,
	$hash,
	val,
	originalClasses = {};
 
	// if .infobox-buttons-select is present, turn the buttons into a dropdown
	if ($infoboxselect.length) {
		$select = $('<select>')
			.attr({
				id: 'infobox-select',
				name: 'infobox-select'
			});
 
		$infoboxselect.children().each(function() {
			var $this = $(this),
				$option = $('<option>')
					.val($this.attr('data-switch-index'))
					.text($this.text())
					.attr('data-switch-anchor', '#' + $this.text());
 
			$select.append($option);
		});
 
		$select.change(function (event) {
			showInfoboxVariant($(event.currentTarget).val());
 
			var val = $(event.currentTarget).val();
 
			// change the hash to be a shortcut to the infobox
			// hacky since you can't get the specific option tag from the event, so have to re-find it
			changeHash($('#infobox-select > option[value="' + val + '"]').attr('data-switch-anchor'));
		});
 
		// remove all the buttons from the container and replace it with the select
		$infoboxselect
			.empty()
			.append(
				'<label for="infobox-select">' +
					'<strong>Version:&nbsp;</strong>' +
				'</label>'
			)
			.append($select);
 
	// otherwise make the buttons clickable
	} else {
		$("span.button[data-switch-index]").click(function (e) {
			showInfoboxVariant($(e.target).attr('data-switch-index'));
			// change the hash to be a shortcut to the infobox
			changeHash($(e.target).attr('data-switch-anchor'));
			$('span.button[data-switch-index][disabled]').removeAttr('disabled');
			$(e.target).attr('disabled', true);
		});
	}
 
	// setup originalClasses
	$(	'.infobox-switch th[data-attr-param][data-attr-param!=""], ' +
		'.infobox-switch td[data-attr-param][data-attr-param!=""], ' +
		'.infobox-switch caption[data-attr-param][data-attr-param!=""]').each(function () {
		var $this = $(this), $parent = $this.parent('tr'), origclass;
		if ($parent.length) {
			// parent is a <tr>, so get that class
			origclass = $parent.attr('class');
		} else {
			// parent is not a <tr>, probably means its <caption> (with parent <table>)
			origclass = $this.attr('class');
		}
		if (typeof origclass === 'undefined') {
			// there was no class, so set it as the empty string
			origclass = '';
		}
		originalClasses[$this.attr('data-attr-param')] = origclass;
	});
 
	// unhide the buttons/select
	$('.infobox-buttons').show();
 
	// if there's a hash, and it matches text of one of the buttons/options, switch to it on load
	if (window.location.hash !== "") {
		$hash = $(
			'.infobox-buttons > span[data-switch-anchor="' + window.location.hash + '"],' +
			'.infobox-buttons > select > option[data-switch-anchor="' + window.location.hash + '"]'
		);
 
		if ($hash.length) {
			// if $hash.val() is "", its a span-button so grab the switch index instead
			showInfoboxVariant($hash.val() ?  $hash.val() : $hash.attr('data-switch-index'));
			//change the select as well (silently fails if there isn't a select)
			$('.infobox-buttons > select').val($hash.val());
			$('.infobox-buttons > span[data-switch-anchor="'+window.location.hash+'"]').attr('disabled', true); //disable the relevant button (silently fails for dropdowns)
 
		// if can't find an element matching the hash, disable version 1
		// (buttons only - silently fails for dropdowns)
		} else {
			$('.infobox-buttons > span[data-switch-index="1"]').attr('disabled', true);
		}
 
	// if there isn't a hash, disable version 1 (buttons only - silently fails for dropdowns)
	} else {
		$('.infobox-buttons > span[data-switch-index="1"]').attr('disabled', true);
	}
})(jQuery);