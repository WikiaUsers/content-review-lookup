/* Cualquier código JavaScript escrito aquí se cargará para todos los usuarios en cada carga de página. */  /* 5. displayTimer */ importScript('MediaWiki:Common.js/displayTimer.js');  /* 7. Borrado rápido */ var fdButtons = []; fdButtons[fdButtons.length] = { 'summary': 'Vandalismo', 'label': 'Vandalismo'}; fdButtons[fdButtons.length] = { 'summary': 'Artículo/Archivo Duplicado', 'label': 'Duplicado'}; fdButtons[fdButtons.length] = { 'summary': 'Artículo/Archivo Fanon', 'label': 'Fanon'}; fdButtons[fdButtons.length] = { 'summary': 'Artículo demasiado corto (Infraesbozo)', 'label': 'InfEsb'}; importScriptPage('MediaWiki:Common.js/BorradoRapido.js', 'es.ben10');    // ============================================================ \\ // Contador de visitas \\ // Idea: Benfutbol10 [Giovi] ((CC-BY-SA)) \\ // ============================================================ \\  $(function() { if(skin == "oasis") { var $sidebar = $('.CorporateFooter'); var comboString = "<div style='right:5px; float:right;'><img src='http://contador-de-visitas.com/hit.php?id=918604&counter=37' alt='Contador' border=0 /></div>";  $sidebar.html($sidebar.html() + comboString); } else if(skin == "monobook") { var $sidebar = $('#p-wikicities-nav'); var comboString = "<div style='margin:5px'><img src='http://contador-de-visitas.com/hit.php?id=918604&counter=37' alt='Contador' border=0 /></div>"; $sidebar.html($sidebar.html() + comboString); } });  // ============================================================ \\ // Contador de visitas \\ // Idea: Benfutbol10 [Giovi] ((CC-BY-SA)) \\ // ============================================================ \\  $(function() { var $sidebar = $('.WikiaFooter .toolbar .tools'); var comboString = "Hola"; });  /* 9. Contador de Tiempo */  // // Usage example: // <span class="countdown" style="display:none;"> // Only <span class="countdowndate">January 01 2007 00:00:00 PST</span> until New years. // </span> // <span class="nocountdown">Javascript disabled.</span> // // If the date is in the format "x|January 01 2007 00:00:00 PST", then the timer is periodic with period x seconds using the given date as the starting time. function updatetimer(i) { var now = new Date(); var then = timers[i].eventdate; var diff = Math.floor((then.getTime()-now.getTime())/1000);  // catch bad date strings if(isNaN(diff)) {  timers[i].firstChild.nodeValue = '** ' + timers[i].eventdate + ' **' ; return; }  // reduce modulo period if necessary if(timers[i].period > 0){ if(diff<0) diff = timers[i].period - ((-diff)%timers[i].period); else diff = diff%timers[i].period; }  // determine plus/minus if(diff<0) { diff = -diff; var tpm = ' '; } else { var tpm = ' '; }  // calcuate the diff var left = (diff%60) + ' segundos'; diff=Math.floor(diff/60); if(diff > 0) left = (diff%60) + ' minutos ' + left; diff=Math.floor(diff/60); if(diff > 0) left = (diff%24) + ' horas ' + left; diff=Math.floor(diff/24); if(diff > 0) left = diff + ' días ' + left timers[i].firstChild.nodeValue = tpm + left;  // a setInterval() is more efficient, but calling setTimeout() // makes errors break the script rather than infinitely recurse timeouts[i] = setTimeout('updatetimer(' + i + ')',1000); }  function checktimers() { //hide 'nocountdown' and show 'countdown' var nocountdowns = getElementsByClassName(document, 'span', 'nocountdown'); for(var i in nocountdowns) nocountdowns[i].style.display = 'none' var countdowns = getElementsByClassName(document, 'span', 'countdown'); for(var i in countdowns) countdowns[i].style.display = 'inline'  //set up global objects timers and timeouts. timers = getElementsByClassName(document, 'span', 'countdowndate'); timeouts = new Array(); // generic holder for the timeouts, global if(timers.length == 0) return; for(var i in timers) { var str = timers[i].firstChild.nodeValue; var j = str.indexOf('|'); if(j == -1) timers[i].period = 0; else { timers[i].period = parseInt(str.substr(0, j)); if(isNaN(timers[i].period) || timers[i].period < 0) timers[i].period = 0; str = str.substr(j + 1); } timers[i].eventdate = new Date(str); updatetimer(i); //start it up } } addOnloadHook(checktimers);  /* 10. NOMBREUSUARIO */  function UserNameReplace(){ if (wgUserName){ var spans = getElementsByClassName(document, "span", "insertusername");  for (var i = 0; i < spans.length; i++){ spans[i].innerHTML = wgUserName; } } }  addOnloadHook(UserNameReplace);  /* 11. Plegado y desplegado */  importScriptPage('ShowHide/code.js', 'dev'); // 8. AutoRefreshing RecentChanges and WikiActivity  AjaxRCRefreshText = 'Actualización automatica'; AjaxRCRefreshHoverText = 'Refrescar esta página automáticamente'; ajaxPages = ["Especial:CambiosRecientes","Especial:WikiActivity"]; importScriptPage('AjaxRC/code.js', 'dev');