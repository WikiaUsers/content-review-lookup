    //* HOW DOES IT WORK *
    // declare an element (most preferrably a div) on your page with id=tipout and data-targets listing all html classes of elements to receive tooltip feature; e.g.: 
    //      <div id="tipout" data-targets="collpart,room"></div>   
    // declare as many "info boxes" as wanted, each one must have a class "tipsrc" and page-wide unique id attribute (by default they are invisible, may be generated by module or declared manually)
    // all your page's elements having the class listed in data-targets and having data-tip attribute will get events bound to display tip box on hover/click; e.g.:
    //      <div class="tipsrc" id="horsewagon"><center><b>Horsewagon</b></center>...
    //      <div data-tip="horsewagon" class="mapel collpart yellow"...
    // when such element is pointed with mouse cursor or tapped on a mobile it causes showing tooltip filled with matching "info box" (its id vs hovered item's data-tip attribute)
    // 
    // advanced feature: "info box" may contain some elements (divs, spans etc.) with class "tippart" showing certain portion of the "info box"
    // use "data-idx" attribute to declare which part of the contents must be highlighted; 1 - means first etc.; e.g.:
    //      <div data-tip="maps" data-idx="1" class="mapel collpart blue" 
    // split contents of the "info box" into parts - their order determines their number (first one is 1, second - 2 etc.), e.g.:
    //      <div class="tipsrc" id="maps"><span class="tippart">(first)</span><span class="tippart">(second)</span>...
    // when displaying the tooltip, script detects that a portion of contents is to be "highlighted" and adds/removes html classes: "on" and "off" to subsequent parts of the tooltip
    // by default that makes "highlighted" part opaque and all the other parts - semitransparent; css can be adjusted (.tippart.on and .tippart.off) to change this behaviour (e.g. display:block|none) 
    
    //hide the tooltip
    function tipHide() {
        document.getElementById('tipout').style.display = 'none';
    }
    //show the tooltip, optionally highlighting certain portion of it
    function tipShow(evt) {
        //where to get displayed info from
        var tiptag = evt.target.getAttribute('data-tip');
        if (!tiptag) return;
        //put the info in the tooltip, move it near the cursor and show it
        var tipout = document.getElementById('tipout');
        tipout.innerHTML = document.getElementById(tiptag).innerHTML;
//        tipout.style.left = (evt.clientX-140)+'px';
//        tipout.style.top = (evt.clientY-190+window.scrollY)+'px';
		var offset = findPos(document.getElementsByTagName('main')[0]);
        tipout.style.left = (evt.clientX-offset[0]+20)+'px';
        tipout.style.top = (evt.clientY-offset[1]+20+window.scrollY)+'px';
        tipout.style.display = 'block';
        //advanced feature: highlighting part of the contents
        var idx = evt.target.getAttribute('data-idx');
        if (idx) {
            var parts = tipout.getElementsByClassName('tippart');
            //assign "on" class to the highlighted part and "off" class to all the other parts (mutually exclusive)
            for (p=0; p<parts.length; p++) {
                parts[p].classList.add((p+1==idx ? 'on' : 'off'));
                parts[p].classList.remove((p+1==idx ? 'off' : 'on'));
            }
        }
    }
    //find all elements with matching class and bind events to them
    if (document.getElementById('tipout')) {
        //classes to be targeted by this code
        var classes = document.getElementById('tipout').getAttribute('data-targets').split(',');
        for (c=0; c<classes.length; c++) {
            //find all matching elements...
            var els = document.getElementsByClassName(classes[c]);
            for (e=0; e<els.length; e++) {
                //... and bind events to those having reference to an info box
                if (els[e].getAttribute('data-tip')) {
                    els[e].addEventListener('click', tipShow);
                    els[e].addEventListener('mouseover', tipShow);
                    els[e].addEventListener('mouseout', tipHide);
                }
            }
        }
    }

	function findPos(obj) {
		var curleft = curtop = 0;
		if (obj.offsetParent) {
			do {
				curleft += obj.offsetLeft;
				curtop += obj.offsetTop;
			} while (obj = obj.offsetParent);
		}
		return [curleft,curtop];
	}