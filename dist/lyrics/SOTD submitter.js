/**
 * SOTD Submitter
 *
 * intercept SOTD nominations made at [[Special:SOTD]] and add them to [[LyricWiki talk:Song of the Day]] instead
 * this is a temporary work-around until the Song of the Day extension can be fixed
 * <nowiki>
 */

/*jslint browser, for, long */
/*global jQuery, mediaWiki */

(function ($, mw) {
    "use strict";

    var date = new Date();
    var editToken = mw.user.tokens.get("editToken");
    var sotdPage = "LyricWiki talk:Song of the Day";
    var sotdPageId = 236641;
    var statusNode = null;
    var today = {
        year: date.getUTCFullYear(),
        month: date.getUTCMonth() + 1,
        day: date.getUTCDate()
    };
    var ytTest = /(?:youtu\.be\/|[?&]v=)([^\/?&#]{11})/;

    function toTitleCase(string) {
        // prepend space so first character is matched
        string = " " + string;

        return string.replace(/[\s"(]+\S/g, function (match) {
            return match.toUpperCase();
        }).trim();
    }

    function loadCaptcha(captchaData) {
        var img = document.createElement("img");
        img.src = captchaData.url;
        img.style.cssText = "display: block; margin: 5px auto;";

        var id = document.createElement("input");
        id.id = "wpCaptchaId";
        id.type = "hidden";
        id.value = captchaData.id;

        var input = document.createElement("input");
        input.id = "wpCaptchaWord";
        input.placeholder = "Enter text here";
        input.type = "text";

        statusNode.appendChild(img);
        statusNode.appendChild(id);
        statusNode.appendChild(input);
    }

    function sessionInit(callback) {
        // TODO: is there a better way to do this? I feel like I'm missing something obvious...

        // use action=submit to force a session cookie and edit token to be generated by the server,
        // as it seems the captcha service will not work reliably otherwise (returns 404 for images)
        $.get(mw.util.getUrl(sotdPage), {
            action: "submit"
        }).done(function () {
            // now fetch the new edit token
            $.ajax({
                url: mw.util.wikiScript("api"),
                data: {
                    action: "query",
                    format: "json",
                    prop: "info",
                    intoken: "edit",
                    titles: sotdPage
                },
                dataType: "json"
            }).always(function (data) {
                if (data.query) {
                    editToken = data.query.pages[sotdPageId].edittoken;
                }
                callback();
            });
        }).fail(callback);
    }

    function appendNomination(nominationData) {
        var data = {
            action: "edit",
            format: "json",
            section: "1",
            appendtext: nominationData.text,
            summary: "new SOTD nomination",
            title: sotdPage,
            watchlist: "nochange",
            token: editToken,
            wpCaptchaClass: "\\Captcha\\Module\\FancyCaptcha"
        };

        if (nominationData.captcha) {
            data.wpCaptchaId = nominationData.captcha.id;
            data.wpCaptchaWord = nominationData.captcha.word;
        }

        return $.ajax({
            url: mw.util.wikiScript("api"),
            data: data,
            dataType: "json",
            type: "POST"
        });
    }

    function processForm(formData) {
        var data = {
            artist: toTitleCase(formData.artist.value),
            song: toTitleCase(formData.song.value),
            reason: formData.reason.value.trim(),
            videoId: formData.vlink.value !== formData.vlink.attributes.placeholder.value
                ? formData.vlink.value
                : "",
            hasPreferredDate: formData.prefdate.checked,
            preferredDay: formData.pday.value,
            preferredMonth: mw.config.get("wgMonthNames")[formData.pmonth.value],
            preferredYear: today.year + Number(formData.pyear.value),
            occasion: formData.occasion.value.trim()
        };

        // add captcha data if it exists
        if (formData.wpCaptchaId) {
            data.captcha = {
                id: formData.wpCaptchaId.value,
                word: formData.wpCaptchaWord.value
            };
        }

        // convert full YouTube link to video ID
        var ytMatch = ytTest.exec(data.videoId);
        if (ytMatch) {
            data.videoId = ytMatch[1];
        }


        if (!data.artist) {
            return {
                status: "Please enter an artist name."
            };
        }

        if (!data.song) {
            return {
                status: "Please enter a song name."
            };
        }

        // check if reason, after removing repeated chars, is longer than 50 chars
        if (data.reason.replace(/(.)\1{2,}/gi, "$1").length < 50) {
            return {
                status: "Please provide a reason (at least 50 characters long)."
            };
        }

        if (
            data.hasPreferredDate
            && data.preferredYear <= today.year
            && Number(formData.pmonth.value) <= today.month
            && Number(data.preferredDay) <= today.day
        ) {
            return {
                status: "The preferred date must be in the future."
            };
        }

        //if (!data.videoId) {
        //    return {
        //        status: "Please provide a video link."
        //    };
        //}


        // https://github.com/Wikia/app/blob/dev/extensions/3rdparty/LyricWiki/SongOfTheDay/Special_SOTD.body.php#L163-L187
        var text = "\n" +
                "'''Song: \"[[" + data.artist + ":" + data.song + "|" + data.song + "]]\" by [[" + data.artist + "]]'''<br/>\n" +
                "'''Nominated by:''' [[User:{{subst:REVISIONUSER}}|{{subst:REVISIONUSER}}]]<br/>\n" +
                "'''Reason:''' " + data.reason + "<br/>\n";
        if (data.videoId) {
            if (data.videoId.length === 11) {
                text += "'''Video:''' {{video|" + data.videoId + "}}<br/>\n";
            } else {
                text += "'''Video:''' " + data.videoId + "<br/>\n";
            }
        }
        if (data.hasPreferredDate) {
            text += "'''Preferred Date:''' " + data.preferredMonth + " " + data.preferredDay + ", " + data.preferredYear;
            if (data.occasion) {
                text += " (" + data.occasion + ")";
            }
            text += "<br/>\n";
        }
        text += "\n<br/>";


        return {
            status: "Success",
            captcha: data.captcha,
            text: text
        };
    }

    function submitHandler(event) {
        event.preventDefault();

        var submitButon = event.target.querySelector("input[type='submit']");
        submitButon.disabled = true;

        var throbber = document.createElement("div");
        throbber.className = "wikiaThrobber";
        event.target.appendChild(throbber);

        var nominationData = processForm(event.target.elements);

        var callback = function () {
            appendNomination(nominationData).always(function (response) {
                event.target.removeChild(throbber);
                if (response.edit && response.edit.result === "Success") {
                    statusNode.innerHTML = "Thanks! Your nomination was added to the suggestions for our <a href='" + mw.util.getUrl("LyricWiki:Song of the Day") + "'>Song of the Day</a>.";
                } else if (response.edit && response.edit.captcha) {
                    statusNode.textContent = "Complete the CAPTCHA challenge below to add your nomination:";
                    submitButon.disabled = false;
                    loadCaptcha(response.edit.captcha);
                } else {
                    statusNode.textContent = "The nomination could not be added.";
                }
            });
        };

        if (nominationData.status === "Success") {
            // if anon without an edit token, force the server to set up a session
            // without this, captcha images seem to return 404
            if (editToken === "+\\") {
                sessionInit(callback);
            } else {
                callback();
            }
        } else {
            event.target.removeChild(throbber);
            submitButon.disabled = false;
            statusNode.textContent = nominationData.status;
        }
    }

    function init() {
        var sotdForm = document.forms["add-sotd"];

        if (sotdForm) {
            // add status area as second-last row (before row containing "Nominate" button)
            var tbody = sotdForm.querySelector("tbody");
            var statusRow = document.createElement("tr");
            tbody.insertBefore(statusRow, tbody.lastElementChild);

            statusNode = document.createElement("td");
            statusNode.className = "sotd-error";
            statusNode.colSpan = 2;
            statusNode.innerHTML = "Please read the <a href='" + mw.util.getUrl("LyricWiki:Song of the Day/Special page") + "'>nomination guidelines</a> before submitting a song!";
            statusNode.style.textAlign = "center";
            statusRow.appendChild(statusNode);

            // hide audio (goear) row in table
            tbody.children[4].style.display = "none";

            // change month values to their names to avoid confusion with days
            var i;
            var monthDropdown = sotdForm.querySelector("select[name='pmonth']");
            for (i = 0; i < 12; i += 1) {
                monthDropdown[i].textContent = mw.config.get("wgMonthNames")[i + 1];
            }
            // remove fixed width on month dropdown
            monthDropdown.style.width = "";

            // attach form submit handler
            sotdForm.addEventListener("submit", submitHandler, false);
        }
    }

    $(init);
}(jQuery, mediaWiki));