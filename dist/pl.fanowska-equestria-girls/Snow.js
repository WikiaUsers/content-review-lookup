/** @license<br />* DHTML Snowstorm! JavaScript-based Snow for web pages<br />* --------------------------------------------------------<br />* Version 1.43.20111201 (Previous rev: 1.42.20111120)<br />* Copyright (c) 2007, Scott Schiller. All rights reserved.<br />* Code provided under the BSD License:<br />* http://schillmania.com/projects/snowstorm/license.txt<br />*/

/*global window, document, navigator, clearInterval, setInterval */<br />/*jslint white: false, onevar: true, plusplus: false, undef: true, nomen: true, eqeqeq: true, bitwise: true, regexp: true, newcap: true, immed: true */

window.snowStorm = {

// --- common properties ---

autoStart: true, // Whether the snow should start automatically or not.<br />flakesMax: 50, // Limit total amount of snow made (falling + sticking)<br />flakesMaxActive: 50, // Limit amount of snow falling at once (less = lower CPU use)<br />animationInterval: 35, // Theoretical "miliseconds per frame" measurement. 20 = fast + smooth, but high CPU use. 50 = more conservative, but slower<br />excludeMobile: true, // Snow is likely to be bad news for mobile phones' CPUs (and batteries.) By default, be nice.<br />flakeBottom: null, // Integer for Y axis snow limit, 0 or null for "full-screen" snow effect<br />followMouse: false, // Snow movement can respond to the user's mouse<br />snowColor: '#fff', // Don't eat (or use?) yellow snow.<br />snowCharacter: '&bull;', // &bull; = bullet, &middot; is square on some systems etc.<br />snowStick: false, // Whether or not snow should "stick" at the bottom. When off, will never collect.<br />targetElement: document.body, // element which snow will be appended to (null = document.body) - can be an element ID eg. 'myDiv', or a DOM node reference<br />useMeltEffect: true, // When recycling fallen snow (or rarely, when falling), have it "melt" and fade out if browser supports it<br />useTwinkleEffect: false, // Allow snow to randomly "flicker" in and out of view while falling<br />usePositionFixed: true, // true = snow does not shift vertically when scrolling. May increase CPU load, disabled by default - if enabled, used only where supported

// --- less-used bits ---

freezeOnBlur: true, // Only snow when the window is in focus (foreground.) Saves CPU.<br />flakeLeftOffset: 0, // Left margin/gutter space on edge of container (eg. browser window.) Bump up these values if seeing horizontal scrollbars.<br />flakeRightOffset: 0, // Right margin/gutter space on edge of container<br />flakeWidth: 8, // Max pixel width reserved for snow element<br />flakeHeight: 8, // Max pixel height reserved for snow element<br />vMaxX: 5, // Maximum X velocity range for snow<br />vMaxY: 4, // Maximum Y velocity range for snow<br />zIndex: 0 // CSS stacking order applied to each snowflake<br />};<br />// --- End of user section ---

snowStorm.internal = {<br />// UA sniffing and backCompat rendering mode checks for fixed position, etc.<br />isIE: navigator.userAgent.match(/msie/i),<br />isIE6: navigator.userAgent.match(/msie 6/i),<br />isWin98: navigator.appVersion.match(/windows 98/i),<br />isMobile: navigator.userAgent.match(/mobile|opera m(ob|in)/i),<br />screenX: null,<br />screenX2: null,<br />screenY: null,<br />scrollY: null,<br />vRndX: null,<br />vRndY: null,<br />windOffset: 1,<br />windMultiplier: 2,<br />flakeTypes: 6,<br />fixedForEverything: false,<br />opacitySupported: true,<br />didInit: false,<br />docFrag: document.createDocumentFragment()<br />};<br />snowStorm.internal.isBackCompatIE = (snowStorm.internal.isIE && document.compatMode == 'BackCompat');<br />snowStorm.internal.noFixed = (snowStorm.internal.isMobile || snowStorm.internal.isBackCompatIE || snowStorm.internal.isIE6);<br />try {<br />document.createElement('div').style.opacity = '0.5';<br />} catch(e) {<br />snowStorm.internal.opacitySupported = false;<br />}

snowStorm.timers = [];<br />snowStorm.flakes = [];<br />snowStorm.disabled = false;<br />snowStorm.active = false;<br />snowStorm.meltFrameCount = 20;<br />snowStorm.meltFrames = [];

snowStorm.events = {};<br />snowStorm.events.add = function(element, listener, func) {<br />if (!window.addEventListener && window.attachEvent) {<br />element.attachEvent('on' + listener, func);<br />}<br />else {<br />element.addEventListener.apply(element, Array.prototype.slice.call(arguments, 1))<br />}<br />}
snowStorm.events.remove = function(element, listener, func) {<br />if (!window.addEventListener && window.attachEvent) {<br />element.detachEvent('on' + listener, func);<br />}<br />else {<br />element.removeEventListener.apply(element, Array.prototype.slice.call(arguments, 1))<br />}<br />}
<br />function rnd(n, min) {<br />if (isNaN(min)) {<br />min = 0;<br />}<br />return (Math.random() * n) + min;<br />}
<br />function plusMinus(n) {<br />if (parseInt(rnd(2), 10) == 1) {<br />return n * -1;<br />}<br />else {<br />return n;<br />}<br />}
<br />snowStorm.randomizeWind = function() {<br />snowStorm.internal.vRndX = plusMinus(rnd(snowStorm.vMaxX, 0.2));<br />snowStorm.internal.vRndY = rnd(snowStorm.vMaxY, 0.2);<br />if (snowStorm.flakes) {<br />for (var i = 0; i < snowStorm.flakes.length; i++) {<br />if (snowStorm.flakes[i].active) {<br />snowStorm.flakes[i].setVelocities();<br />}<br />}<br />}<br />};<br />
snowStorm.scrollHandler = function() {<br />// "attach" snowflakes to bottom of window if no absolute bottom value was given<br />snowStorm.internal.scrollY = (snowStorm.flakeBottom ? 0 : parseInt(window.scrollY || document.documentElement.scrollTop || document.body.scrollTop, 10));<br />if (isNaN(snowStorm.internal.scrollY)) {<br />snowStorm.internal.scrollY = 0; // Netscape 6 scroll fix<br />}<br />if (!snowStorm.internal.fixedForEverything && !snowStorm.flakeBottom && snowStorm.flakes) {<br />for (var i = snowStorm.flakes.length - 1; i >= 0; i--) {<br />if (snowStorm.flakes[i].active == 0) {<br />snowStorm.flakes[i].stick();<br />}<br />}<br />}<br />};<br />
snowStorm.resizeHandler = function() {<br />if (window.innerWidth || window.innerHeight) {<br />snowStorm.internal.screenX = window.innerWidth - 16 - snowStorm.flakeRightOffset;<br />snowStorm.internal.screenY = (snowStorm.flakeBottom ? snowStorm.flakeBottom : window.innerHeight);<br />} else {<br />snowStorm.internal.screenX = (document.documentElement.clientWidth || document.body.clientWidth || document.body.scrollWidth) - (!snowStorm.internal.isIE ? 8 : 0) - snowStorm.flakeRightOffset;<br />snowStorm.internal.screenY = snowStorm.flakeBottom ? snowStorm.flakeBottom : (document.documentElement.clientHeight || document.body.clientHeight || document.body.scrollHeight);<br />}<br />snowStorm.internal.screenX2 = parseInt(snowStorm.internal.screenX / 2, 10);<br />};

snowStorm.resizeHandlerAlt = function() {<br />snowStorm.internal.screenX = snowStorm.targetElement.offsetLeft + snowStorm.targetElement.offsetWidth - snowStorm.flakeRightOffset;<br />snowStorm.internal.screenY = snowStorm.flakeBottom ? snowStorm.flakeBottom : snowStorm.targetElement.offsetTop + snowStorm.targetElement.offsetHeight;<br />snowStorm.internal.screenX2 = parseInt(snowStorm.internal.screenX/2,10);<br />};<br />
snowStorm.freeze = function() {<br />// pause animation<br />if (!snowStorm.disabled) {<br />snowStorm.disabled = 1;<br />} else {<br />return false;<br />}<br />for (var i = snowStorm.timers.length - 1; i >= 0; i--) {<br />clearInterval(snowStorm.timers[i]);<br />}<br />};<br />
snowStorm.resume = function() {<br />if (snowStorm.disabled) {<br />snowStorm.disabled = 0;<br />} else {<br />return false;<br />}<br />snowStorm.timerInit();<br />};<br />
snowStorm.toggleSnow = function() {<br />if (!snowStorm.flakes.length) {<br />// first run<br />snowStorm.start();<br />} else {<br />snowStorm.active = !snowStorm.active;<br />if (snowStorm.active) {<br />snowStorm.show();<br />snowStorm.resume();<br />} else {<br />snowStorm.stop();<br />snowStorm.freeze();<br />}<br />}<br />};<br />
snowStorm.stop = function() {<br />snowStorm.freeze();<br />for (var i = snowStorm.flakes.length - 1; i >= 0; i--) {<br />snowStorm.flakes[i].o.style.display = 'none';<br />}<br />snowStorm.events.remove(window, 'scroll', snowStorm.scrollHandler);<br />snowStorm.events.remove(window, 'resize', snowStorm.resizeHandler);<br />if (snowStorm.freezeOnBlur) {<br />if (snowStorm.internal.isIE) {<br />snowStorm.events.remove(document, 'focusout', snowStorm.freeze);<br />snowStorm.events.remove(document, 'focusin', snowStorm.resume);<br />} else {<br />snowStorm.events.remove(window, 'blur', snowStorm.freeze);<br />snowStorm.events.remove(window, 'focus', snowStorm.resume);<br />}<br />}<br />};<br />
snowStorm.show = function() {<br />for (var i = snowStorm.flakes.length - 1; i >= 0; i--) {<br />snowStorm.flakes[i].o.style.display = 'block';<br />}<br />};<br />
snowStorm.SnowFlake = function(type, x, y) {<br />this.type = type;<br />this.x = x || parseInt(rnd(snowStorm.internal.screenX - 20), 10);<br />this.y = (!isNaN(y) ? y : -rnd(snowStorm.internal.screenY) - 12);<br />this.vX = null;<br />this.vY = null;<br />this.vAmpTypes = [1, 1.2, 1.4, 1.6, 1.8]; // "amplification" for vX/vY (based on flake size/type)<br />this.vAmp = this.vAmpTypes[this.type];<br />this.melting = false;<br />this.meltFrameCount = snowStorm.meltFrameCount;<br />this.meltFrames = snowStorm.meltFrames;<br />this.meltFrame = 0;<br />this.twinkleFrame = 0;<br />this.active = 1;<br />this.fontSize = (10 + (this.type / 5) * 10);<br />this.o = document.createElement('div');<br />this.o.innerHTML = snowStorm.snowCharacter;<br />this.o.style.color = snowStorm.snowColor;<br />this.o.style.position = (snowStorm.internal.fixedForEverything ? 'fixed' : 'absolute');<br />this.o.style.width = snowStorm.flakeWidth + 'px';<br />this.o.style.height = snowStorm.flakeHeight + 'px';<br />this.o.style.fontFamily = 'arial,verdana';<br />this.o.style.cursor = 'default';<br />this.o.style.overflow = 'hidden';<br />this.o.style.fontWeight = 'normal';<br />this.o.style.zIndex = snowStorm.zIndex;<br />snowStorm.internal.docFrag.appendChild(this.o);

this.refresh = function() {<br />if (isNaN(this.x) || isNaN(this.y)) {<br />// safety check<br />return false;<br />}<br />this.o.style.left = this.x + 'px';<br />this.o.style.top = this.y + 'px';<br />};<br />
this.stick = function() {<br />if (snowStorm.internal.noFixed || (snowStorm.targetElement !== document.documentElement && snowStorm.targetElement !== document.body)) {<br />this.o.style.top = (snowStorm.internal.screenY + snowStorm.internal.scrollY - snowStorm.flakeHeight) + 'px';<br />} else if (snowStorm.flakeBottom) {<br />this.o.style.top = snowStorm.flakeBottom + 'px';<br />} else {<br />this.o.style.display = 'none';<br />this.o.style.top = 'auto';<br />this.o.style.bottom = '0px';<br />this.o.style.position = 'fixed';<br />this.o.style.display = 'block';<br />}<br />};

this.vCheck = function() {<br />if (this.vX >= 0 && this.vX < 0.2) {<br />this.vX = 0.2;<br />} else if (this.vX < 0 && this.vX > -0.2) {<br />this.vX = -0.2;<br />}<br />if (this.vY >= 0 && this.vY < 0.2) {<br />this.vY = 0.2;<br />}<br />};<br />
this.move = function() {<br />var vX = this.vX * snowStorm.internal.windOffset;<br />this.x += vX;<br />this.y += (this.vY * this.vAmp);<br />if (this.x >= snowStorm.internal.screenX || snowStorm.internal.screenX - this.x < snowStorm.flakeWidth) { // X-axis scroll check<br />this.x = 0;<br />} else if (vX < 0 && this.x - snowStorm.flakeLeftOffset < -snowStorm.flakeWidth) {<br />this.x = snowStorm.internal.screenX - snowStorm.flakeWidth-1; // flakeWidth;<br />}<br />this.refresh();<br />var yDiff = snowStorm.internal.screenY + snowStorm.internal.scrollY - this.y;<br />if (yDiff < snowStorm.flakeHeight) {<br />this.active = 0;<br />if (snowStorm.snowStick) {<br />this.stick();<br />} else {<br />this.recycle();<br />}<br />} else {<br />if (snowStorm.useMeltEffect && this.active && this.type < 3 && !this.melting && Math.random() > 0.998) {<br />// ~1/1000 chance of melting mid-air, with each frame<br />this.melting = true;<br />this.melt();<br />// only incrementally melt one frame<br />// this.melting = false;<br />}<br />if (snowStorm.useTwinkleEffect) {<br />if (!this.twinkleFrame) {<br />if (Math.random() > 0.9) {<br />this.twinkleFrame = parseInt(Math.random() * 20, 10);<br />}<br />} else {<br />this.twinkleFrame--;<br />this.o.style.visibility = (this.twinkleFrame && this.twinkleFrame % 2 == 0 ? 'hidden' : 'visible');<br />}<br />}<br />}<br />};

this.animate = function() {<br />// main animation loop<br />// move, check status, die etc.<br />this.move();<br />};

this.setVelocities = function() {<br />this.vX = snowStorm.internal.vRndX + rnd(snowStorm.vMaxX * 0.12, 0.1);<br />this.vY = snowStorm.internal.vRndY + rnd(snowStorm.vMaxY * 0.12, 0.1);<br />};

this.setOpacity = function(o, opacity) {<br />if (!snowStorm.internal.opacitySupported) {<br />return false;<br />}<br />o.style.opacity = opacity;<br />};

this.melt = function() {<br />if (!snowStorm.useMeltEffect || !this.melting) {<br />this.recycle();<br />} else {<br />if (this.meltFrame < this.meltFrameCount) {<br />this.setOpacity(this.o, this.meltFrames[this.meltFrame]);<br />this.o.style.fontSize = this.fontSize - (this.fontSize * (this.meltFrame / this.meltFrameCount)) + 'px';<br />this.o.style.lineHeight = snowStorm.flakeHeight + 2 + (snowStorm.flakeHeight * 0.75 * (this.meltFrame / this.meltFrameCount)) + 'px';<br />this.meltFrame++;<br />} else {<br />this.recycle();<br />}<br />}<br />};<br />
this.recycle = function() {<br />this.o.style.display = 'none';<br />this.o.style.position = (snowStorm.internal.fixedForEverything ? 'fixed' : 'absolute');<br />this.o.style.bottom = 'auto';<br />this.setVelocities();<br />this.vCheck();<br />this.meltFrame = 0;<br />this.melting = false;<br />this.setOpacity(this.o, 1);<br />this.o.style.padding = '0px';<br />this.o.style.margin = '0px';<br />this.o.style.fontSize = this.fontSize + 'px';<br />this.o.style.lineHeight = (snowStorm.flakeHeight + 2) + 'px';<br />this.o.style.textAlign = 'center';<br />this.o.style.verticalAlign = 'baseline';<br />this.x = parseInt(rnd(snowStorm.internal.screenX - snowStorm.flakeWidth - 20), 10);<br />this.y = parseInt(rnd(snowStorm.internal.screenY) * -1, 10) - snowStorm.flakeHeight;<br />this.refresh();<br />this.o.style.display = 'block';<br />this.active = 1;<br />};

this.recycle(); // set up x/y coords etc.<br />this.refresh();

};<br />
snowStorm.snow = function() {<br />var active = 0;<br />var used = 0;<br />var waiting = 0;<br />var flake = null;<br />for (var i = snowStorm.flakes.length - 1; i >= 0; i--) {<br />if (snowStorm.flakes[i].active == 1) {<br />snowStorm.flakes[i].move();<br />active++;<br />} else if (snowStorm.flakes[i].active == 0) {<br />used++;<br />} else {<br />waiting++;<br />}<br />if (snowStorm.flakes[i].melting) {<br />snowStorm.flakes[i].melt();<br />}<br />}<br />if (active < snowStorm.flakesMaxActive) {<br />flake = snowStorm.flakes[parseInt(rnd(snowStorm.flakes.length), 10)];<br />if (flake.active == 0) {<br />flake.melting = true;<br />}<br />}<br />};<br />
snowStorm.mouseMove = function(e) {<br />if (!snowStorm.followMouse) {<br />return true;<br />}<br />var x = parseInt(e.clientX, 10);<br />if (x < snowStorm.internal.screenX2) {<br />snowStorm.internal.windOffset = -snowStorm.internal.windMultiplier + (x / snowStorm.internal.screenX2 * snowStorm.internal.windMultiplier);<br />} else {<br />x -= snowStorm.internal.screenX2;<br />snowStorm.internal.windOffset = (x / snowStorm.internal.screenX2) * snowStorm.internal.windMultiplier;<br />}<br />};<br />
snowStorm.createSnow = function(limit, allowInactive) {<br />for (var i = 0; i < limit; i++) {<br />snowStorm.flakes.push(new snowStorm.SnowFlake(parseInt(rnd(snowStorm.internal.flakeTypes), 10)));<br />if (allowInactive || i > snowStorm.flakesMaxActive) {<br />snowStorm.flakes[snowStorm.flakes.length - 1].active = -1;<br />}<br />}<br />snowStorm.targetElement.appendChild(snowStorm.internal.docFrag);<br />};

snowStorm.timerInit = function() {<br />snowStorm.timers = (!snowStorm.internal.isWin98 ? [setInterval(snowStorm.snow, snowStorm.animationInterval)] : [setInterval(snowStorm.snow, snowStorm.animationInterval * 3), setInterval(snowStorm.snow, snowStorm.animationInterval)]);<br />};

snowStorm.init = function() {<br />for (var i = 0; i < snowStorm.meltFrameCount; i++) {<br />snowStorm.meltFrames.push(1 - (i / snowStorm.meltFrameCount));<br />}<br />snowStorm.randomizeWind();<br />snowStorm.createSnow(snowStorm.flakesMax); // create initial batch<br />snowStorm.events.add(window, 'resize', snowStorm.resizeHandler);<br />snowStorm.events.add(window, 'scroll', snowStorm.scrollHandler);<br />if (snowStorm.freezeOnBlur) {<br />if (snowStorm.internal.isIE) {<br />snowStorm.events.add(document, 'focusout', snowStorm.freeze);<br />snowStorm.events.add(document, 'focusin', snowStorm.resume);<br />} else {<br />snowStorm.events.add(window, 'blur', snowStorm.freeze);<br />snowStorm.events.add(window, 'focus', snowStorm.resume);<br />}<br />}<br />snowStorm.resizeHandler();<br />snowStorm.scrollHandler();<br />if (snowStorm.followMouse) {<br />snowStorm.events.add(snowStorm.internal.isIE ? document : window, 'mousemove', snowStorm.mouseMove);<br />}<br />snowStorm.animationInterval = Math.max(20, snowStorm.animationInterval);<br />snowStorm.timerInit();<br />};<br />
snowStorm.start = function(bFromOnLoad) {<br />if (!snowStorm.internal.didInit) {<br />snowStorm.internal.didInit = true;<br />} else if (bFromOnLoad) {<br />// already loaded and running<br />return true;<br />}<br />if (typeof snowStorm.targetElement == 'string') {<br />var targetID = snowStorm.targetElement;<br />snowStorm.targetElement = document.getElementById(targetID);<br />if (!snowStorm.targetElement) {<br />throw new Error('Snowstorm: Unable to get targetElement "' + targetID + '"');<br />}<br />}<br />if (!snowStorm.targetElement) {<br />snowStorm.targetElement = (!snowStorm.internal.isIE ? (document.documentElement ? document.documentElement : document.body) : document.body);<br />}<br />if (snowStorm.targetElement !== document.documentElement && snowStorm.targetElement !== document.body) {<br />snowStorm.resizeHandler = snowStorm.resizeHandlerAlt; // re-map handler to get element instead of screen dimensions<br />}<br />snowStorm.resizeHandler(); // get bounding box elements<br />snowStorm.usePositionFixed = (snowStorm.usePositionFixed && !snowStorm.internal.noFixed); // whether or not position:fixed is supported<br />snowStorm.internal.fixedForEverything = snowStorm.usePositionFixed;<br />if (snowStorm.internal.screenX && snowStorm.internal.screenY && !snowStorm.disabled) {<br />snowStorm.init();<br />snowStorm.active = true;<br />}<br />};

function doDelayedStart() {<br />setTimeout(function() {<br />snowStorm.start(true);<br />}, 20);<br />// event cleanup<br />snowStorm.events.remove(snowStorm.internal.isIE ? document : window, 'mousemove', doDelayedStart);<br />}

function doStart() {<br />if (!snowStorm.excludeMobile || !snowStorm.internal.isMobile) {<br />if (snowStorm.freezeOnBlur) {<br />snowStorm.events.add(snowStorm.internal.isIE ? document : window, 'mousemove', doDelayedStart);<br />} else {<br />doDelayedStart();<br />}<br />}<br />// event cleanup<br />snowStorm.events.remove(window, 'load', doStart);<br />}
<br />// hooks for starting the snow<br />if (snowStorm.autoStart) {<br />snowStorm.events.add(window, 'load', doStart, false);<br />}